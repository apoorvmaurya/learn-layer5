syntax = "proto3";

import "google/protobuf/empty.proto";
import "meshkit/protobuf/common/error.proto";
import "meshkit/protobuf/controller/info.proto";
import "meshkit/protobuf/controller/health.proto";
package proto;

option go_package = "proto;proto";

enum Capability {
    FULL = 0;
    HALF = 1;
    NONE = 2;
}

enum TestStatus {
    COMPLETED = 0;
    INPROGRESS = 1;
    CRASHED = 2;
}

enum ResultStatus {
    PASSED = 0;
    FAILED = 1;
}

message ServiceMesh {
    string name = 1;
    string version = 2;
    map<string,string> labels = 3;
    map<string,string> annotations = 4;
}

message Request {
    ServiceMesh mesh = 1;
}

message Result {
  oneof result {
    string message = 1;
    common.CommonError error = 2;
  }
}

message Detail {
    string smispec = 1;
    string specversion = 2;
    string assertion = 3;
    string duration = 4;
    Result result = 5;
    TestStatus status = 6;
}

message Response {
    string passpercent = 1;
    string casespassed = 2;
    ServiceMesh mesh = 3;
    Capability capability = 4;
    repeated Detail details = 5;
}

service conformanceTesting{
    rpc Info (google.protobuf.Empty) returns (controller.ControllerInfo);
    rpc Health (google.protobuf.Empty) returns (controller.ControllerHealth);
    rpc RunTest (Request) returns (Response);
}